#!/usr/bin/ruby

require 'erb'
require 'optparse'

module Runner
  class Render
    def initialize(scope = {})
      scope.each_pair { |k,v| self.instance_variable_set("@#{k}", v) }
    end

    def render(filename)
      ERB.new(File.read(filename), nil, '-').result(binding)
    end
  end

  class CLI
    def initialize
      begin
        # step: parse the config
        parser.parse!
        # step: perform basic validation of config
        validate_config
        # step: generate the config
        generate_config
      rescue Exception => e
        usage e.message
      end
    end

    private
    def validate_config
      usage "you have not specified any proxies to generate" if options[:proxies].empty?
      usage "the template: #{options[:template]} does not exist" unless File.exist?(options[:template])
      usage "the template: #{options[:template]} is not a file" unless File.file?(options[:template])
    end

    def generate_config
      scope = {
        :proxies => []
      }
      # step: build the scope
      options[:proxies].each do |proxy|
        # step: validate the specification
        validate_proxy_spec(proxy) do |interface, endpoints|
          scope[:proxies] << {
            :interface => interface,
            :endpoints => endpoints,
          }
        end
      end
      # step: generate the content
      content = Render::new(scope).render(options[:template])
      # step: write the configuration to disk
      puts content
      # step: exit with error if dry running
      exit 1 if options[:dryrun]
    end

    # validate_proxy_spec ... parses the proxy specification and extracts the elements
    def validate_proxy_spec(spec, &block)
      invalid "you haven't specified a spec to parse" unless spec
      # step: split on the commas
      elements = spec.split(',')
      invalid "invalid proxy specification: #{spec}" if elements.empty?
      invalid "the specification: #{spec} should have a binding and at least one endpoint" if elements.size < 2
      # step: validate the local interface
      local_interface = elements.shift
      invalid "the local interface: #{local_interface} is invalid" unless ip_endpoint?(local_interface)
      # step: iterate the endpoints
      elements.each do |x|
        invalid "the endpoint definition: #{x} is invalid, should be IP:PORT" unless endpoint?(x)
      end
      yield local_interface, elements
    end

    def ip_endpoint?(ep)
      ep =~ /^([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]{2,5}$/
    end

    def endpoint?(ep)
      ep =~ /^[a-zA-Z0-9\-.]+:[0-9]{2,5}$/
    end

    def options
      @options ||= {
        :proxies  => [],
        :dryrun   => false,
        :config   => '/etc/haproxy/haproxy.conf',
        :template => '/etc/haproxy/haproxy.conf.erb',
      }
    end

    def parser
      @parser ||= OptionParser.new do|opts|
	      opts.on('-p SPEC', '--proxy SPEC', 'a proxy specification for the haproxy') { |x| options[:proxies] << x }
        opts.on('-d', '--dryrun', 'perform dryrun, i.e. just show the resulting configuration') { options[:dryrun] = true }
        opts.on('-t TEMPLATE', '--template TEMPLATE', 'the path to the haproxy template erb') { |x| options[:template] = x }
        opts.on('-h', '--help', 'display this usage menu') { usage }
      end
    end

    def invalid(message)
      raise ArgumentError, message
    end

    def usage(message = nil)
      puts parser
      if message
        puts "\n[errors] %s" % [ message ]
        exit 1
      end
      exit 9
    end
  end
end

Runner::CLI::new
